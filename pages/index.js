import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import Header from "../components/Header";
import { getUserAppointment } from "../components/redux/action/index";
import { useDispatch } from "react-redux";
import { serviceOptions, nationalityOptions, idType } from "../constants/index";
import AppointmentForm from "../components/appointment-form";

export default function Home() {
  const dispatch = useDispatch();
  const { push } = useRouter();
  const [selectedService, setSelectedService] = useState(serviceOptions[0]);
  const [isValidation, setIsValidation] = useState(false);
  const [validationsError, setValidationsError] = useState({
    application_id: "",
    dob: "",
    name: "",
    nationality: "",
    id_type: "",
    id_number: "",
  });
  const [inputFields, setInputFields] = useState({
    application_id: "",
    dob: "",
    name: "",
    nationality: "",
    id_type: "",
    id_number: "",
  });

  const handle_change = (e) => {
    const key = e.target.id;
    const temp = { ...inputFields };
    temp[key] = e.target.value;
    setInputFields(temp);
  };

  const handle_select = (value, id) => {
    const temp = { ...inputFields };
    temp[id] = value;
    setInputFields(temp);
  };

  const handle_date_change = (e) => {
    const temp = { ...inputFields };
    temp["dob"] = e.target.value;
    setInputFields(temp);
  };

  const handleContinue = () => {
    const obj = {
      selectedService: selectedService,
      appointmentDetails: inputFields,
    };
    setIsValidation(true);
    if (selectedService.label !== "Visa") {
      if (
        inputFields.name.trim() !== "" &&
        inputFields.nationality.label.trim() !== "" &&
        inputFields.id_type.label.trim() !== "" &&
        inputFields.id_number.trim() !== ""
      ) {
        dispatch(getUserAppointment(obj));
        push({
          pathname: "/book-appointment",
          query: { selectedService: selectedService.label },
        });
      } else {
        let errors = { ...validationsError };

        if (!inputFields.name.trim()) errors.name = "This Field is required";
        else errors.name = "";

        if (!inputFields.nationality.label?.trim())
          errors.nationality = "This Field is required";
        else errors.nationality = "";

        if (!inputFields.id_type.label?.trim())
          errors.id_type = "This Field is required";
        else errors.id_type = "";

        if (!inputFields.id_number.trim())
          errors.id_number = "This Field is required";
        else errors.id_number = "";

        setValidationsError(errors);
      }
    } else {
      if (
        inputFields.application_id.trim() !== "" &&
        inputFields.dob.trim() !== ""
      ) {
        dispatch(getUserAppointment(obj));
        push({
          pathname: "/book-appointment",
          query: { selectedService: selectedService.label },
        });
      } else {
        let errors = { ...validationsError };

        if (!inputFields.application_id.trim())
          errors.application_id = "This Field is required";
        else errors.application_id = "";

        if (!inputFields.dob.trim()) errors.dob = "This Field is required";
        else errors.dob = "";

        setValidationsError(errors);
      }
    }
  };

  useEffect(() => {
    if (isValidation) {
      if (selectedService.label !== "Visa") {
        let errors = { ...validationsError };

        if (!inputFields.name.trim()) errors.name = "This Field is required";
        else errors.name = "";

        if (!inputFields.nationality.label?.trim())
          errors.nationality = "This Field is required";
        else errors.nationality = "";

        if (!inputFields.id_type.label?.trim())
          errors.id_type = "This Field is required";
        else errors.id_type = "";

        if (!inputFields.id_number.trim())
          errors.id_number = "This Field is required";
        else errors.id_number = "";

        setValidationsError(errors);
      } else {
        let errors = { ...validationsError };

        if (!inputFields.application_id.trim())
          errors.application_id = "This Field is required";
        else errors.application_id = "";

        if (!inputFields.dob.trim()) errors.dob = "This Field is required";
        else errors.dob = "";

        setValidationsError(errors);
      }
    }
  }, [
    isValidation,
    inputFields.application_id,
    inputFields.dob,
    inputFields.id_number,
    inputFields.id_type,
    inputFields.name,
    inputFields.nationality,
  ]);

  return (
    <>
      <Head>
        <title>Home Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <AppointmentForm
        selectedService={selectedService}
        setSelectedService={setSelectedService}
        setIsValidation={setIsValidation}
        setValidationsError={setValidationsError}
        serviceOptions={serviceOptions}
        handle_change={handle_change}
        inputFields={inputFields}
        validationsError={validationsError}
        handle_date_change={handle_date_change}
        handle_select={handle_select}
        handleContinue={handleContinue}
        nationalityOptions={nationalityOptions}
        idType={idType}
      />
    </>
  );
}
